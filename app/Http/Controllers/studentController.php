<?php

namespace App\Http\Controllers;

use App\Events\StudentCreated;
use App\Events\StudentDeleted;
use Illuminate\Http\Request;
use App\Models\StudentDetails;
use App\Models\OralModel;
use App\Models\EndsemModel;
use App\Models\AssignmentModel;
use App\Models\Co_Total_Expt;
use App\Models\Co_Total_Ia;
use App\Models\IaModel;
use App\Models\ExperimentModel;
use Illuminate\Validation\ValidationException;


class studentController extends Controller
{
    public function index()
    {
    }

    public function inputForm()
    {
        $total_tuples = $this->totalNumStd();
        $last_record = StudentDetails::where("user_key", "=", session()->get('user_id'))->orderBy('roll_no', 'Desc')->first();
        $divs = StudentDetails::Divs;
        $genders = StudentDetails::Genders;
        return view("input", compact('total_tuples', 'last_record', 'divs', 'genders'));
    }

    public function addStudent(Request $req)
    {
        $divs = StudentDetails::Divs;
        $genders = StudentDetails::Genders;
        $req->validate([
            'roll_no' => 'required',
            'student_id' => 'required',
            'div' => 'required | in:' . current($divs) . ',' . next($divs) . ',' . next($divs) . ',' . next($divs),
            'student_name' => 'required | min:5 | max:80',
            'gender' => 'required | in:' . current($genders) . ',' . next($genders) . ',' . next($genders) . ',' . next($genders)
        ]);

        $student_dups = StudentDetails::where("user_key", "=", session()->get('user_id'))->where('student_id', "=", $req['student_id'])->distinct('id')->count();
        if ($student_dups) {
            throw ValidationException::withMessages(["student_id" => "Student with same ID is present"]);
            return redirect()->back();
        }

        // Group key is composite of roll_no + div + user_key
        // it will be useful to avoid duplictate entries for per user pre div
        $group_key = strval($req['roll_no']) . "-" . strval($req['div']) . "-" . strval(session()->get('user_id'));
        $duplicate = StudentDetails::where('group_key', '=', $group_key)->get();


        if (count($duplicate) === 0) {
            $student = new StudentDetails();
            $student->roll_no = $req['roll_no'];
            $student->student_id = $req['student_id'];
            $student->div = $req['div'];
            $student->name = $req['student_name'];
            $student->gender = $req['gender'];
            $student->user_key = session()->get('user_id');
            $student->group_key = $group_key;
            $student->save();

            // Student records in all associative tables will be automatically 
            // generated by Observer- StudentObserver and event- StudentCreated

            session()->flash("alertMsg", "Student - $student->name ($student->student_id) saved successfully !");
            return redirect()->back();
        } else {
            //flashing duplicate error to students view 
            session()->flash("duplicateRecordError", "Student with Roll number $req->roll_no in Div $req->div allready present, check again please !");
            return redirect()->back();
        }
    }

    public function viewStudents(Request $req)
    {
        $search = $req['searchForm'] ?? ""; // can be or cannt
        if ($search != "") {
            $students = StudentDetails::where("user_key", "=", (session()->get('user_id')))->where("name", "LIKE", "%$search%")->paginate(10);
        } else {
            $students = StudentDetails::where("user_key", "=", (session()->get('user_id')))->orderBy('roll_no', 'ASC')->paginate(10);
        }

        $viewEditBtn = "Edit";
        $viewEditURL = url('/students/view/edit');

        $viewDeleteBtn = "Trash";
        $viewDeleteURL = url('/students/view/delete');

        $trashBtn = "Trash Data";
        $trashURL = url("/students/trash");

        $addStdBtn = "âž• Add Student";
        $addStdURL = url("/students/input");
        return view('view')->with(compact('students', 'viewEditBtn', 'viewEditURL', 'viewDeleteBtn', 'viewDeleteURL', 'trashBtn', 'trashURL', 'addStdBtn', 'addStdURL'));
    }

    // soft deleting student (Moving to Trash)
    public function deleteStudent($id)
    {
        $student = StudentDetails::withoutTrashed()->find($id);
        if (!is_null($student)) {
            $student->delete();
        }
        session()->flash("alertMsg", "Student - $student->name ($student->student_id) moved to Trash.");
        return redirect()->back();
    }

    public function permDelete($id)
    {
        $data = array('id' => $id);
        event(new StudentDeleted($data));

        $student = StudentDetails::onlyTrashed()->find($id);
        if (!is_null($student)) {
            $student->forceDelete();
        }
        //  record from all associative tables will be deleted by observer and event
        session()->flash("alertMsg", "Student - $student->name ($student->student_id) deleted permnantly.");
        return redirect()->back();
    }

    public function restoreFromTrash($id)
    {
        $student = StudentDetails::onlyTrashed()->find($id);
        if ($student) {
            $student->restore();
        }
        session()->flash("alertMsg", "Student - $student->name ($student->student_id) restored successfully.");
        return redirect()->back();
    }

    // View Student trash
    public function viewStudentTrash()
    {
        $students = StudentDetails::onlyTrashed()->where("user_key", (session()->get('user_id')))->paginate(10);
        $viewEditBtn = "Restore";
        $viewEditURL = url('/students/view/restore');

        $viewDeleteBtn = "Delete";
        $viewDeleteURL = url('/students/view/permdelete');

        $trashBtn = "Back to Students";
        $trashURL = url("/students/view");

        $addStdBtn = "ðŸ«— Empty Trash";
        $addStdURL = url("/students/empty-trash");
        return view('view')->with(compact('students', 'viewEditBtn', 'viewEditURL', 'viewDeleteBtn', 'viewDeleteURL', 'trashBtn', 'trashURL', 'addStdBtn', 'addStdURL'));
    }

    public function moveAllToTrash()
    {
        $AllTrash = StudentDetails::withoutTrashed()->where("user_key", session()->get("user_id"))->get();
        // foreach($AllTrash as $elem){
        //     $data = array("id" => $elem->id);
        //     event(new StudentDeleted($data));
        // }
        $deleteAllTrash = StudentDetails::withoutTrashed()->where("user_key", session()->get("user_id"))->delete();

        if (!$deleteAllTrash) {
            session()->flash("alertMsg", "Unable to perform mass deletion.");
        }
        session()->flash("alertMsg", "Mass deletion successfull, All moved to trash.");
        return redirect()->back();
    }

    public function emptyTrash()
    {
        $AllTrash = StudentDetails::onlyTrashed()->where("user_key", session()->get("user_id"))->get();
        foreach ($AllTrash as $elem) {
            $data = array("id" => $elem->id);
            event(new StudentDeleted($data));
        }
        $deleteAllTrash = StudentDetails::onlyTrashed()->where("user_key", session()->get("user_id"))->forceDelete();

        if (!$deleteAllTrash) {
            session()->flash("alertMsg", "Unable to perform mass deletion.");
        }
        session()->flash("alertMsg", "Mass deletion successfull");
        return redirect()->back();
    }

    // Edit the student
    public function editStudent($id)
    {
        $student = StudentDetails::find($id);
        if (is_null($student)) {
            return redirect()->back();
        } else {
            return view('edit-input')->with(compact('student'));
        }
    }

    public function updateStudentData($id, Request $req)
    {

        $req->validate([
            'roll_no' => 'required',
            'student_id' => 'required',
            'div' => 'required | in:A,B',
            'student_name' => 'required | min:5 | max:80',
            'gender' => 'required | in:M,F'
        ]);

        $student = StudentDetails::find($id);

        // If there is any student other than $id-student then return duplication error
        $student_dups = StudentDetails::where("user_key", session()->get('user_id'))->where('student_id', "=", $req['student_id'])->where("student_id", "!=", $student->student_id)->distinct('id')->count();
        if ($student_dups) {
            throw ValidationException::withMessages(["student_id" => "Student with same ID is present"]);
            return redirect()->back();
        }

        // Group key is composite of roll_no + div + user_key
        // it will be useful to avoid duplictate entries for per user pre div
        $group_key = strval($req['roll_no']) . "-" . strval($req['div']) . "-" . strval(session()->get('user_id'));
        $duplicate_grp = StudentDetails::where('group_key', '=', $group_key)->get();


        if (count($duplicate_grp) < 2) {
            $student->roll_no = $req['roll_no'];
            $student->student_id = $req['student_id'];
            $student->div = $req['div'];
            $student->name = $req['student_name'];
            $student->gender = $req['gender'];
            $student->user_key = session()->get('user_id');
            $student->group_key = $group_key;
            $student->save();

            session()->flash("alertMsg", "Student Information of - $student->name ($student->student_id) updated.");
            return redirect('/students/view');
        } else {
            //flashing duplicate entry error to students view only once 
            session()->flash("duplicateRecordError", "Student with Roll number $req->roll_no in Div $req->div allready present, check again please !");
            return redirect()->back();
        }
    }

    public function studentProfile(Request $req)
    {
        $student = StudentDetails::withoutTrashed()->find($req['id']);
        $oral_marks = OralModel::join("student_details", "student_details.id", "oral.id")
            ->select("oral_marks")
            ->where("user_key", session()->get("user_id"))
            ->where("student_details.id", $req['id'])->first();
        $endsem_marks = EndsemModel::join("student_details", "student_details.id", "endsem.id")
            ->select("endsem_mark")
            ->where("user_key", session()->get("user_id"))
            ->where("student_details.id", $req['id'])->first();
        $assign_marks = AssignmentModel::join("student_details", "student_details.id", "assignments.id")
            ->select("a1", "a2")
            ->where("user_key", session()->get("user_id"))
            ->where("student_details.id", $req['id'])->first();
        $ia_marks = IaModel::join("student_details", "student_details.id", "ia.id")
            ->select("ia1q1", "ia1q2", "ia1q3", "ia1q4", "ia1", "ia2q1", "ia2q2", "ia2q3", "ia2q4", "ia2")
            ->where("user_key", session()->get("user_id"))
            ->where("student_details.id", $req['id'])->first();
        $expt_marks = ExperimentModel::join("student_details", "student_details.id", "experiments.id")
            ->select("e1", "e2", "e3", "e4", "e5", "e6", "e7", "e8", "e9", "e10", "e11", "e12")
            ->where("user_key", session()->get("user_id"))
            ->where("student_details.id", $req['id'])->first();



        return  json_encode(array(
            "student" => $student->name,
            "oral" => $oral_marks->oral_marks,
            "endsem" => $endsem_marks->endsem_mark,
            "assign" => ($assign_marks),
            "ia" => $ia_marks,
            "expt" => $expt_marks
        ));
    }
}
